name: Quarkus CI

on: [push, pull_request]

env:
  # Workaround testsuite locale issue
  LANG: en_US.UTF-8
  NATIVE_TEST_MAVEN_OPTS: "-B --settings azure-mvn-settings.xml -Dquarkus.native.container-build=true -Dtest-postgresql -Dtest-elasticsearch -Dtest-keycloak -Ddocker-keycloak -Dtest-dynamodb -Dtest-mysql -Dtest-vault -Dtest-neo4j -Dnative-image.xmx=6g -Dnative -Dno-format install"
  JVM_TEST_MAVEN_OPTS: "-e -B --settings azure-mvn-settings.xml -Dtest-postgresql -Dtest-elasticsearch -Dtest-mysql -Dtest-dynamodb -Dtest-vault -Dtest-neo4j -Dno-format"
  DB_USER: hibernate_orm_test
  DB_PASSWORD: hibernate_orm_test
  DB_NAME: hibernate_orm_test
jobs:
  build-jdk8:
    name: "JDK 8 Build"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: n1hility/cancel-previous-runs@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Compute cache restore key
        # Always recompute on a push so that the maven repo doesnt grow indefinitely with old versions
        run: |
           if ${{ github.event_name == 'pull_request' }}; then echo "::set-env name=COMPUTED_RESTORE_KEY::q2maven-"; fi
      - name: Cache Maven Repository
        id: cache-maven
        uses: n1hility/cache@v2
        with:
          path: ~/.m2/repository
          # Improves the reusability of the cache to limit key changes
          key: q2maven-${{ hashFiles('bom/runtime/pom.xml') }}
          restore-keys: ${{ env.COMPUTED_RESTORE_KEY }}
          restore-only: ${{ github.event_name == 'pull_request' }}
      - name: Build
        run: |
          mvn -e -B  -DskipTests=true -Dno-format -DskipDocs clean install
      - name: Tar Maven Repo
        shell: bash
        run: tar -czvf maven-repo.tgz -C ~ .m2/repository
      - name: Persist Maven Repo
        uses: actions/upload-artifact@v1
        with:
          name: maven-repo
          path: maven-repo.tgz
      - name: Cleanup Cache
        shell: bash
        run: |
          find ~/.m2/repositoiry/io/quarkus/ -mindepth 1 -maxdepth 1 \( ! -name http -a ! -name gizmo -a ! -name security \) -exec echo {} \; -exec rm -rf {} \; || true

  linux-jvm-test:
   
    name: JDK ${{matrix.java-version}} JVM Tests
    needs: build-jdk8
    strategy:
      matrix:
        java-version: [8, 11, 12]

    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:10.5
        env:
          POSTGRES_USER: hibernate_orm_test
          POSTGRES_PASSWORD: hibernate_orm_test
          POSTGRES_DB: hibernate_orm_test
        ports:
          - 5432:5432
      neo4j:
        image: neo4j/neo4j-experimental:4.0.0-rc01
        env:
          NEO4J_AUTH: neo4j/secret
          NEO4J_dbms_memory_pagecache_size: 10M 
          NEO4J_dbms_memory_heap_initial__size: 10M
        ports:
          - 7687:7687
      dynamodb:
        image: amazon/dynamodb-local:1.11.477
        ports:
          - 8000:8000

    steps:
      - name: Start mysql
        shell: bash
        run: |
          sudo service mysql stop || true
          docker run --rm --publish 3306:3306 --name build-mysql -e MYSQL_USER=$DB_USER -e MYSQL_PASSWORD=$DB_PASSWORD -e MYSQL_DATABASE=$DB_NAME -e MYSQL_RANDOM_ROOT_PASSWORD=true -e MYSQL_DATABASE=hibernate_orm_test -d mysql:5 --skip-ssl
      - uses: actions/checkout@v2
      - name: Set up JDK ${{ matrix.java-version }}
        uses: joschi/setup-jdk@v1
        with:
          java-version: openjdk${{ matrix.java-version }}
      - name: Download Maven Repo
        uses: actions/download-artifact@v1
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzvf maven-repo.tgz -C ~
      - name: Build with Maven
        run: eval mvn $JVM_TEST_MAVEN_OPTS install
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -name '*-reports' -type d | tar -czvf test-reports.tgz -T - 
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: test-reports
          path: 'test-reports.tgz'

  windows-jdk8-jvm-test:
    name: Windows JDK 8 JVM Tests
    needs: build-jdk8
    runs-on: windows-latest
    env:
      MAVEN_OPTS: -Xmx1280m
   
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: joschi/setup-jdk@v1
        with:
          java-version: openjdk8
      - name: Download Maven Repo
        uses: actions/download-artifact@v1
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzvf maven-repo.tgz -C ~
      - name: Build with Maven
        shell: bash
        run: mvn -B --settings azure-mvn-settings.xml -Dno-native -Dno-format install
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: |
          # Disambiguate windows find from cygwin find
          /usr/bin/find . -name '*-reports' -type d | tar -czvf test-reports.tgz -T - 
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: test-reports
          path: 'test-reports.tgz'

  tcks-test:
    name: TCKS Test
    needs: build-jdk8
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:10.5
        env:
          POSTGRES_USER: hibernate_orm_test
          POSTGRES_PASSWORD: hibernate_orm_test
          POSTGRES_DB: hibernate_orm_test
        ports:
          - 5432:5432
      neo4j:
        image: neo4j/neo4j-experimental:4.0.0-rc01
        env:
          NEO4J_AUTH: neo4j/secret
          NEO4J_dbms_memory_pagecache_size: 10M 
          NEO4J_dbms_memory_heap_initial__size: 10M
        ports:
          - 7687:7687
      dynamodb:
        image: amazon/dynamodb-local:1.11.477
        ports:
          - 8000:8000

    steps:
      - name: Start mysql
        shell: bash
        run: |
          sudo service mysql stop || true
          docker run --rm --publish 3306:3306 --name build-mysql -e MYSQL_USER=$DB_USER -e MYSQL_PASSWORD=$DB_PASSWORD -e MYSQL_DATABASE=$DB_NAME -e MYSQL_RANDOM_ROOT_PASSWORD=true -e MYSQL_DATABASE=hibernate_orm_test -d mysql:5 --skip-ssl
      - uses: actions/checkout@v2
      - name: Set up JDK 8
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: Download Maven Repo
        uses: actions/download-artifact@v1
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzvf maven-repo.tgz -C ~
      - name: Build with Maven
        run: mvn -B --settings azure-mvn-settings.xml -Dno-native -Dno-format -DskipTests -Dtcks install
      - name: Verify with Maven
        run: mvn -B --settings azure-mvn-settings.xml -f tcks/pom.xml verify
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -name '*-reports' -type d | tar -czvf test-reports.tgz -T - 
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: test-reports
          path: 'test-reports.tgz'
       
  native-main:
    name: Native Tests - Main
    needs: build-jdk8
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:10.5
        env:
          POSTGRES_USER: hibernate_orm_test
          POSTGRES_PASSWORD: hibernate_orm_test
          POSTGRES_DB: hibernate_orm_test
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Download Maven Repo
        uses: actions/download-artifact@v1
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzvf maven-repo.tgz -C ~
      - name: Build with Maven
        run: eval mvn -pl integration-tests/main $NATIVE_TEST_MAVEN_OPTS
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -name '*-reports' -type d | tar -czvf test-reports.tgz -T - 
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: test-reports
          path: 'test-reports.tgz'

  native-data1:
    name: Native Tests - Data1
    needs: build-jdk8
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Download Maven Repo
        uses: actions/download-artifact@v1
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzvf maven-repo.tgz -C ~
      - name: Build with Maven
        run: |
          for i in \
            jpa-h2 \
            jpa-mariadb \
            jpa-mssql \
            jpa-derby \
            jpa-without-entity
          do modules+=("integration-tests/$i"); done
          IFS=,
          eval mvn -pl "${modules[*]}" $NATIVE_TEST_MAVEN_OPTS
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -name '*-reports' -type d | tar -czvf test-reports.tgz -T - 
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: test-reports
          path: 'test-reports.tgz'

  native-data2:
    name: Native Tests - Data2
    needs: build-jdk8
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:10.5
        env:
          POSTGRES_USER: hibernate_orm_test
          POSTGRES_PASSWORD: hibernate_orm_test
          POSTGRES_DB: hibernate_orm_test
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Download Maven Repo
        uses: actions/download-artifact@v1
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzvf maven-repo.tgz -C ~
      - name: Start mysql
        shell: bash
        run: |
          sudo service mysql stop || true
          docker run --rm --publish 3306:3306 --name build-mysql -e MYSQL_USER=$DB_USER -e MYSQL_PASSWORD=$DB_PASSWORD -e MYSQL_DATABASE=$DB_NAME -e MYSQL_RANDOM_ROOT_PASSWORD=true -e MYSQL_DATABASE=hibernate_orm_test -d mysql:5 --skip-ssl
      - name: Build with Maven
        run: |
          for i in \
            jpa \
            jpa-postgresql \
            jpa-mysql \
            reactive-mysql-client
          do modules+=("integration-tests/$i"); done
          IFS=,
          eval mvn -pl "${modules[*]}" $NATIVE_TEST_MAVEN_OPTS
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -name '*-reports' -type d | tar -czvf test-reports.tgz -T - 
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: test-reports
          path: 'test-reports.tgz'
  
  native-data3:
    name: Native Tests - Data3
    needs: build-jdk8
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:10.5
        env:
          POSTGRES_USER: hibernate_orm_test
          POSTGRES_PASSWORD: hibernate_orm_test
          POSTGRES_DB: hibernate_orm_test
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Download Maven Repo
        uses: actions/download-artifact@v1
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzvf maven-repo.tgz -C ~
      - name: Build with Maven
        run: |
          for i in \
            flyway \
            hibernate-orm-panache \
            reactive-pg-client 
          do modules+=("integration-tests/$i"); done
          IFS=,
          eval mvn -pl "${modules[*]}" $NATIVE_TEST_MAVEN_OPTS
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -name '*-reports' -type d | tar -czvf test-reports.tgz -T - 
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: test-reports
          path: 'test-reports.tgz'

  
  native-data4:
    name: Native Tests - Data4
    needs: build-jdk8
    runs-on: ubuntu-latest

    services:
      neo4j:
        image: neo4j/neo4j-experimental:4.0.0-rc01
        env:
          NEO4J_AUTH: neo4j/secret
          NEO4J_dbms_memory_pagecache_size: 10M 
          NEO4J_dbms_memory_heap_initial__size: 10M
        ports:
          - 7687:7687

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Download Maven Repo
        uses: actions/download-artifact@v1
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzvf maven-repo.tgz -C ~
      - name: Build with Maven
        run: |
          for i in \
            mongodb-client \
            mongodb-panache \
            neo4j
          do modules+=("integration-tests/$i"); done
          IFS=,
          eval mvn -pl "${modules[*]}" $NATIVE_TEST_MAVEN_OPTS
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -name '*-reports' -type d | tar -czvf test-reports.tgz -T - 
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: test-reports
          path: 'test-reports.tgz'

  
  native-amazon:
    name: Native Tests - Amazon
    needs: build-jdk8
    runs-on: ubuntu-latest

    services:
      dynamodb:
        image: amazon/dynamodb-local:1.11.477
        ports:
          - 8000:8000

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Download Maven Repo
        uses: actions/download-artifact@v1
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzvf maven-repo.tgz -C ~
      - name: Build with Maven
        run: |
          for i in \
            amazon-dynamodb \
            amazon-lambda \
            amazon-lambda-http 
          do modules+=("integration-tests/$i"); done
          IFS=,
          eval mvn -pl "${modules[*]}" $NATIVE_TEST_MAVEN_OPTS
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -name '*-reports' -type d | tar -czvf test-reports.tgz -T - 
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: test-reports
          path: 'test-reports.tgz'

  native-messaging:
    name: Native Tests - Messaging
    needs: build-jdk8
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Download Maven Repo
        uses: actions/download-artifact@v1
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzvf maven-repo.tgz -C ~
      - name: Build with Maven
        run: |
          for i in \
            artemis-core \
            artemis-jms \
            kafka \
            kafka-streams
          do modules+=("integration-tests/$i"); done
          IFS=,
          eval mvn -pl "${modules[*]}" $NATIVE_TEST_MAVEN_OPTS
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -name '*-reports' -type d | tar -czvf test-reports.tgz -T - 
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: test-reports
          path: 'test-reports.tgz'

  native-security1:
    name: Native Tests - Security 1
    needs: build-jdk8
    runs-on: ubuntu-latest

    services:
      keycloak:
        image: quay.io/keycloak/keycloak:8.0.1
        env:
          KEYCLOAK_USER: admin
          KEYCLOAK_PASSWORD: admin
          JAVA_OPTS: "-server -Xms64m -Xmx512m -XX:MetaspaceSize=96M -XX:MaxMetaspaceSize=256m -Djava.net.preferIPv4Stack=true -Djava.awt.headless=true -Dkeycloak.profile.feature.upload_scripts=enabled"
        ports:
          - 8180:8080

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Download Maven Repo
        uses: actions/download-artifact@v1
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzvf maven-repo.tgz -C ~
      - name: Build with Maven
        run: |
          for i in \
            elytron-security-oauth2 \
            elytron-security \
            elytron-security-jdbc \
            elytron-undertow
          do modules+=("integration-tests/$i"); done
          IFS=,
          eval mvn -pl "${modules[*]}" $NATIVE_TEST_MAVEN_OPTS
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -name '*-reports' -type d | tar -czvf test-reports.tgz -T - 
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: test-reports
          path: 'test-reports.tgz'

  native-security2:
    name: Native Tests - Security 2
    needs: build-jdk8
    runs-on: ubuntu-latest

    services:
      keycloak:
        image: quay.io/keycloak/keycloak:8.0.1
        env:
          KEYCLOAK_USER: admin
          KEYCLOAK_PASSWORD: admin
          JAVA_OPTS: "-server -Xms64m -Xmx512m -XX:MetaspaceSize=96M -XX:MaxMetaspaceSize=256m -Djava.net.preferIPv4Stack=true -Djava.awt.headless=true -Dkeycloak.profile.feature.upload_scripts=enabled"
        ports:
          - 8180:8080

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Download Maven Repo
        uses: actions/download-artifact@v1
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzvf maven-repo.tgz -C ~
      - name: Build with Maven
        run: |
          for i in \
            elytron-resteasy \
            oidc \
            oidc-code-flow \
            oidc-tenancy \
            vault-app \
            keycloak-authorization
          do modules+=("integration-tests/$i"); done
          IFS=,
          eval mvn -pl "${modules[*]}" $NATIVE_TEST_MAVEN_OPTS
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -name '*-reports' -type d | tar -czvf test-reports.tgz -T - 
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: test-reports
          path: 'test-reports.tgz'

  native-cache:
    name: Native Tests - Cache
    needs: build-jdk8
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Download Maven Repo
        uses: actions/download-artifact@v1
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzvf maven-repo.tgz -C ~
      - name: Build with Maven
        run: |
          for i in \
            infinispan-cache-jpa \
            infinispan-client \
            infinispan-embedded \
            cache
          do modules+=("integration-tests/$i"); done
          IFS=,
          eval mvn -pl "${modules[*]}" $NATIVE_TEST_MAVEN_OPTS
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -name '*-reports' -type d | tar -czvf test-reports.tgz -T - 
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: test-reports
          path: 'test-reports.tgz'

  native-http:
    name: Native Tests - HTTP
    needs: build-jdk8
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Download Maven Repo
        uses: actions/download-artifact@v1
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzvf maven-repo.tgz -C ~
      - name: Build with Maven
        run: |
          for i in \
            resteasy-jackson \
            vertx \
            vertx-http \
            vertx-graphql \
            virtual-http 
          do modules+=("integration-tests/$i"); done
          IFS=,
          eval mvn -pl "${modules[*]}" $NATIVE_TEST_MAVEN_OPTS
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -name '*-reports' -type d | tar -czvf test-reports.tgz -T - 
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: test-reports
          path: 'test-reports.tgz'
  
  native-misc1:
    name: Native Tests - Misc 1
    needs: build-jdk8
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Download Maven Repo
        uses: actions/download-artifact@v1
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzvf maven-repo.tgz -C ~
      - name: Build with Maven
        run: |
          for i in \
            maven \
            jackson \
            jsonb \
            jsch \
            jgit
          do modules+=("integration-tests/$i"); done
          IFS=,
          eval mvn -pl "${modules[*]}" $NATIVE_TEST_MAVEN_OPTS
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -name '*-reports' -type d | tar -czvf test-reports.tgz -T - 
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: test-reports
          path: 'test-reports.tgz'

  native-misc2:
    name: Native Tests - Misc 2
    needs: build-jdk8
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Download Maven Repo
        uses: actions/download-artifact@v1
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzvf maven-repo.tgz -C ~
      - name: Build with Maven
        run: |
          for i in \
            tika \
            hibernate-validator \
            test-extension \
            logging-gelf
          do modules+=("integration-tests/$i"); done
          IFS=,
          eval mvn -pl "${modules[*]}" $NATIVE_TEST_MAVEN_OPTS
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -name '*-reports' -type d | tar -czvf test-reports.tgz -T - 
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: test-reports
          path: 'test-reports.tgz'

  native-misc3:
    name: Native Tests - Misc 3
    needs: build-jdk8
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Download Maven Repo
        uses: actions/download-artifact@v1
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzvf maven-repo.tgz -C ~
      - name: Build with Maven
        run: |
          for i in \
            kogito \
            kubernetes-client \
            quartz
          do modules+=("integration-tests/$i"); done
          IFS=,
          eval mvn -pl "${modules[*]}" $NATIVE_TEST_MAVEN_OPTS
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -name '*-reports' -type d | tar -czvf test-reports.tgz -T - 
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: test-reports
          path: 'test-reports.tgz'

  native-spring:
    name: Native Tests - Spring
    needs: build-jdk8
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Download Maven Repo
        uses: actions/download-artifact@v1
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzvf maven-repo.tgz -C ~
      - name: Build with Maven
        run: |
          for i in \
            spring-di \
            spring-web \
            spring-data-jpa \
            spring-boot-properties
          do modules+=("integration-tests/$i"); done
          IFS=,
          eval mvn -pl "${modules[*]}" $NATIVE_TEST_MAVEN_OPTS
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -name '*-reports' -type d | tar -czvf test-reports.tgz -T - 
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: test-reports
          path: 'test-reports.tgz'

  native-data5:
    name: Native Tests - Data 5
    needs: build-jdk8
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Download Maven Repo
        uses: actions/download-artifact@v1
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzvf maven-repo.tgz -C ~
      - name: Build with Maven
        run: |
          for i in \
            hibernate-search-elasticsearch \
            narayana-stm \
            narayana-jta
          do modules+=("integration-tests/$i"); done
          IFS=,
          eval mvn -pl "${modules[*]}" $NATIVE_TEST_MAVEN_OPTS
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -name '*-reports' -type d | tar -czvf test-reports.tgz -T - 
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: test-reports
          path: 'test-reports.tgz'